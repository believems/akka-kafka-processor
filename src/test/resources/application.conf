include "kafka"

processor.cluster.master.path = "/user/master/active"

akka {

  actor.provider = "akka.cluster.ClusterActorRefProvider"

  extensions = ["akka.contrib.pattern.ClusterReceptionistExtension"]

  loggers = [akka.event.slf4j.Slf4jLogger]
  loglevel = DEBUG
  #PORT number the same as seed
  remote.netty.tcp.port = 2551
  remote.netty.tcp.hostname = 127.0.0.1

  remote {
    watch-failure-detector {
      heartbeat-interval = 120 s
    }
  }


  cluster {
    seed-nodes = [
      "akka.tcp://"${processor.cluster.name}"@127.0.0.1:2551"
    ]

  #  auto-down-unreachable-after = 10s
    failure-detector {
      # FQCN of the failure detector implementation.
      # It must implement akka.remote.FailureDetector and have
      # a public constructor with a com.typesafe.config.Config and
      # akka.actor.EventStream parameter.
      implementation-class = "akka.remote.PhiAccrualFailureDetector"
     #How often keep-alive heartbeat messages should be sent to each connection.
      heartbeat-interval = 120 s
    }
  }

  actor {
    debug {
      # enable function of Actor.loggable(), which is to log any received message
      # at DEBUG level, see the “Testing Actor Systems” section of the Akka
      # Documentation at http://akka.io/docs
      receive = on

      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = on

      # enable DEBUG logging of actor lifecycle changes
      lifecycle = on

      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = on

      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = on

      # enable DEBUG logging of unhandled messages
      unhandled = on

      # enable WARN logging of misconfigured routers
      router-misconfiguration = on
    }
  }

}