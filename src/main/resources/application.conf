include "kafka"

akka {

  extensions = ["akka.contrib.pattern.ClusterReceptionistExtension"]
  loglevel = INFO
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    debug {
      receive = off
      lifecycle = on
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = on
      # enable DEBUG logging of actor lifecycle changes
      lifecycle = on
      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = on
      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = on
      # enable DEBUG logging of unhandled messages
      unhandled = on
      # enable WARN logging of misconfigured routers
      router-misconfiguration = on
    }
  }

  remote {
    log-remote-lifecycle-events = on
    netty.tcp {
      hostname = ${processor.ip}
      port = ${processor.port}
    }
    watch-failure-detector {
      heartbeat-interval = 120 s
    }
  }

  cluster {
    roles = [master, worker, listener]
    seed-nodes = [
      "akka.tcp://"${processor.cluster.name}"@"${processor.seed-ip}":"${processor.seed-port},
      "akka.tcp://"${processor.cluster.name}"@"${processor.seed2-ip}":"${processor.seed-port},
      "akka.tcp://"${processor.cluster.name}"@"${processor.seed3-ip}":"${processor.seed-port}
    ]
    auto-down-unreachable-after = 10s
    seed-node-timeout = 3s

    failure-detector {

      # FQCN of the failure detector implementation.
      # It must implement akka.remote.FailureDetector and have
      # a public constructor with a com.typesafe.config.Config and
      # akka.actor.EventStream parameter.
      implementation-class = "akka.remote.PhiAccrualFailureDetector"

      # How often keep-alive heartbeat messages should be sent to each connection.
      heartbeat-interval = 50 s
    }
  }

  contrib.cluster.receptionist {
    # Actor name of the ClusterReceptionist actor, /user/receptionist
    name = receptionist

    # Start the receptionist on members tagged with this role.
    # All members are used if undefined or empty.
    role = "master"

    # The receptionist will send this number of contact points to the client
    number-of-contacts = 1

    # The actor that tunnel response messages to the client will be stopped
    # after this time of inactivity.
    response-tunnel-receive-timeout = 30s
  }
}

processor {
  ip = "127.0.0.1"
  ip = ${?CLUSTER_IP}
  port = 1600
  port = ${?CLUSTER_PORT}
  seed-ip = "127.0.0.1"
  seed-ip = ${?CLUSTER_IP}
  seed-ip = ${?SEED_PORT_1600_TCP_ADDR}
  seed-port = 1600
  seed-port = ${?SEED_PORT_1600_TCP_PORT}

  seed2-ip = "127.0.0.1"
  seed2-ip = ${?CLUSTER_IP}
  seed2-ip = ${?SEED2_PORT_1600_TCP_ADDR}

  seed3-ip = "127.0.0.1"
  seed3-ip = ${?CLUSTER_IP}
  seed3-ip = ${?SEED3_PORT_1600_TCP_ADDR}


  cluster.name = ClusterSystem
  cluster.master.path = "/user/master/active"
  contact-points = [
    "akka.tcp://"${processor.cluster.name}"@"${processor.seed-ip}":"${processor.seed-port},
    "akka.tcp://"${processor.cluster.name}"@"${processor.seed2-ip}":"${processor.seed-port},
    "akka.tcp://"${processor.cluster.name}"@"${processor.seed3-ip}":"${processor.seed-port}
  #  "akka.tcp://"${processor.cluster.name}"@"${processor.seed3-ip}":"${processor.seed-port}
   ]

}
