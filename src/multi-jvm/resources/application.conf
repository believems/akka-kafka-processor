include "kafka"

processor.cluster.master.path = "/user/master/active"

processor.contact-points = [
  "akka.tcp://"${processor.cluster.name}"@127.0.0.1:8888",
  #"akka://"${processor.cluster.name},
  "akka.tcp://"${processor.cluster.name}"@127.0.0.1:7777"
  #"akka.tcp://"${processor.cluster.name}"@127.0.0.1:6666",
]
 # ${akka.cluster.seed-nodes}


akka {

  actor.provider = "akka.cluster.ClusterActorRefProvider"
  extensions = ["akka.contrib.pattern.ClusterReceptionistExtension"]
  #extensions = []
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  #loggers = ["akka.testkit.TestEventListener", akka.event.slf4j.Slf4jLogger]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  #stdout-loglevel = "ON"
  loglevel = DEBUG
  log-config-on-start = off
  #PORT number the same as seed
  remote.netty.tcp.port = 2555
  remote.netty.tcp.hostname = 127.0.0.1

  remote {
    watch-failure-detector {
      heartbeat-interval = 120 s
    }
  }

  cluster {
    seed-nodes = [
     // "akka.tcp://"${processor.cluster.name}"@127.0.0.1:6666"
    ]

    auto-join = off
    auto-down = off
    seed-node-timeout = 3s

    roles = []

    auto-down-unreachable-after = 20s
    failure-detector {
      # FQCN of the failure detector implementation.
      # It must implement akka.remote.FailureDetector and have
      # a public constructor with a com.typesafe.config.Config and
      # akka.actor.EventStream parameter.
      implementation-class = "akka.remote.PhiAccrualFailureDetector"
     #How often keep-alive heartbeat messages should be sent to each connection.
      #heartbeat-interval = 120 s
      heartbeat-interval = 5 s
    }
  }

  actor {
    debug {
      # enable function of Actor.loggable(), which is to log any received message
      # at DEBUG level, see the “Testing Actor Systems” section of the Akka
      # Documentation at http://akka.io/docs
      receive = on

      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = on

      # enable DEBUG logging of actor lifecycle changes
      lifecycle = on

      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = on

      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = on

      # enable DEBUG logging of unhandled messages
      unhandled = on

      # enable WARN logging of misconfigured routers
      router-misconfiguration = on
    }
  }

}

akka.contrib.cluster.receptionist {
  # Actor name of the ClusterReceptionist actor, /user/receptionist
  name = receptionist

  # Start the receptionist on members tagged with this role.
  # All members are used if undefined or empty.
  role = ""

  # The receptionist will send this number of contact points to the client
  number-of-contacts = 3

  # The actor that tunnel response messages to the client will be stopped
  # after this time of inactivity.
  response-tunnel-receive-timeout = 30s
}